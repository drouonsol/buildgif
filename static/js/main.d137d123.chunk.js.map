{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["window","Buffer","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","programID","fromSecretKey","PublicKey","network","clusterApiUrl","opts","App","baseAccount","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","createGifAccount","provider","getProvider","getProgram","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","connectWallet","onInputChange","event","value","target","connection","Connection","Provider","useEffect","onLoad","addEventListener","removeEventListener","Program","fetchIdl","idl","account","fetch","sendGif","length","addGif","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d137d123.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\nimport kp from './keypair.json'\n\n\nimport { Buffer } from \"buffer\";\nwindow.Buffer = Buffer;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey('BwXSFiqM12achALepj2RFnWjQiUNDQDJE3PCLaeKrx6F');\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n\n// Constants\nconst TWITTER_HANDLE = 'oursolsavior';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst App = () => {\n  // State\n\n  const arr = Object.values(kp._keypair.secretKey)\n  const secret = new Uint8Array(arr)\n  const baseAccount = web3.Keypair.fromSecretKey(secret)\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  // Actions\n \n  const checkIfWalletIsConnected = async () => {\n    if (window?.solana?.isPhantom) {\n      console.log('Phantom wallet found!');\n      const response = await window.solana.connect({ onlyIfTrusted: true });\n      console.log(\n        'Connected with Public Key:',\n        response.publicKey.toString()\n      );\n\n      /*\n       * Set the user's publicKey in state to be used later!\n       */\n      setWalletAddress(response.publicKey.toString());\n    } else {\n      alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n    }\n  };\n\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      \n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };  \n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n//RENDER CONTAINERS\n\n\n\n\n\nconst renderConnectedContainer = () => {\n  // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n\n\n\n\n\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getProgram = async () => {\n    // Get metadata about your solana program\n    const idl = await Program.fetchIdl(programID, getProvider());\n    // Create a program that you can call\n    return new Program(idl, programID, getProvider());\n  };\n  \n  const getGifList = async() => {\n    try {\n      const program = await getProgram(); \n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider()\n      const program = await getProgram(); \n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n        {!walletAddress && renderNotConnectedContainer()}\n\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n         \n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}